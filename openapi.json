{
  "openapi": "3.0.0",
  "servers": [
    {
      "url": "https://api.nevua.markets",
      "description": "Production"
    }
  ],
  "info": {
    "title": "Nevua Markets API",
    "version": "0.0.1",
    "license": {
      "name": "ISC",
      "url": "https://opensource.org/licenses/ISC"
    }
  },
  "components": {
    "schemas": {
      "SearchJSONRequest": {
        "type": "object",
        "properties": {
          "keyphrases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchKeyphrase"
            }
          },
          "searchMatchOperator": {
            "$ref": "#/components/schemas/SearchMatchOperator"
          },
          "partial": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "required": [
          "keyphrases",
          "partial",
          "searchMatchOperator"
        ]
      },
      "SearchKeyphrase": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "include": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "required": [
          "text"
        ]
      },
      "SearchMatchOperator": {
        "type": "string",
        "enum": [
          "AND",
          "OR"
        ]
      },
      "SearchJSONResponse": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/MatchingEvent"
        }
      },
      "MatchingEvent": {
        "type": "object",
        "properties": {
          "id": {
            "description": "The event ID",
            "type": "string"
          },
          "title": {
            "description": "The event title",
            "type": "string"
          },
          "slug": {
            "description": "The event slug",
            "type": "string"
          },
          "image": {
            "description": "The event image",
            "type": "string"
          },
          "type": {
            "description": "The event type",
            "enum": [
              "event",
              "market"
            ],
            "type": "string"
          },
          "markets": {
            "description": "The markets associated with the event",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "description": "The market ID",
                  "type": "string"
                },
                "image": {
                  "description": "The market image",
                  "type": "string"
                },
                "question": {
                  "description": "The market question",
                  "type": "string"
                },
                "outcomes": {
                  "description": "Outcomes and outcome prices",
                  "type": "string"
                },
                "outcomePrices": {
                  "type": "string"
                },
                "nevuaSVGLink": {
                  "description": "SVG link",
                  "type": "string"
                }
              },
              "additionalProperties": false,
              "required": [
                "id",
                "image",
                "nevuaSVGLink",
                "outcomePrices",
                "outcomes",
                "question"
              ]
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "id",
          "image",
          "markets",
          "slug",
          "title",
          "type"
        ]
      },
      "SearchTagsJSONRequest": {
        "type": "object",
        "properties": {
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchTag"
            }
          },
          "searchMatchOperator": {
            "$ref": "#/components/schemas/SearchMatchOperator"
          }
        },
        "additionalProperties": false,
        "required": [
          "searchMatchOperator",
          "tags"
        ]
      },
      "SearchTag": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string"
          },
          "include": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "required": [
          "text"
        ]
      },
      "CreateWatchlistScopeSubscriptionJSONRequest": {
        "type": "object",
        "properties": {
          "watchlistId": {
            "description": "The ID of the watchlist to create the subscription for.",
            "type": "string"
          },
          "subscriptionTypeConfig": {
            "$ref": "#/components/schemas/SubscriptionTypeConfig"
          },
          "channels": {
            "description": "The channels to send the alert to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookNotificationChannel"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "channels",
          "subscriptionTypeConfig",
          "watchlistId"
        ]
      },
      "SubscriptionTypeConfig": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/CrossingSubscriptionTypeConfig"
          },
          {
            "$ref": "#/components/schemas/CrossingUpSubscriptionTypeConfig"
          },
          {
            "$ref": "#/components/schemas/CrossingDownSubscriptionTypeConfig"
          },
          {
            "$ref": "#/components/schemas/CrossingStepSubscriptionTypeConfig"
          },
          {
            "$ref": "#/components/schemas/GreaterThanSubscriptionTypeConfig"
          },
          {
            "$ref": "#/components/schemas/LessThanSubscriptionTypeConfig"
          },
          {
            "$ref": "#/components/schemas/EventAndMarketOpenStatusChangesSubscriptionTypeConfig"
          }
        ]
      },
      "CrossingSubscriptionTypeConfig": {
        "description": "A 'Crossing' subscription will fire an alert if the price crosses the specified threshold in either direction (up or down).",
        "title": "Crossing",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionType.CROSSING"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig"
          }
        },
        "additionalProperties": false,
        "required": [
          "config",
          "type"
        ]
      },
      "SubscriptionType.CROSSING": {
        "type": "string",
        "enum": [
          "Crossing"
        ]
      },
      "SubscriptionConfig": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/SubscriptionConfig.T"
          }
        },
        "additionalProperties": false,
        "required": [
          "params"
        ]
      },
      "CrossAnyParams": {
        "type": "object",
        "properties": {
          "threshold_percent": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "required": [
          "threshold_percent"
        ]
      },
      "SubscriptionConfig.T": {
        "$ref": "#/components/schemas/CrossAnyParams"
      },
      "CrossingUpSubscriptionTypeConfig": {
        "description": "A 'Crossing Up' subscription will fire an alert if the price crosses the specified threshold upward.",
        "title": "Crossing Up",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionType.CROSSING_UP"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_1"
          }
        },
        "additionalProperties": false,
        "required": [
          "config",
          "type"
        ]
      },
      "SubscriptionType.CROSSING_UP": {
        "type": "string",
        "enum": [
          "Crossing Up"
        ]
      },
      "SubscriptionConfig_1": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/SubscriptionConfig.T_1"
          }
        },
        "additionalProperties": false,
        "required": [
          "params"
        ]
      },
      "CrossUpParams": {
        "type": "object",
        "properties": {
          "threshold_percent": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "required": [
          "threshold_percent"
        ]
      },
      "SubscriptionConfig.T_1": {
        "$ref": "#/components/schemas/CrossUpParams"
      },
      "CrossingDownSubscriptionTypeConfig": {
        "description": "A 'Crossing Down' subscription will fire an alert if the price crosses the specified threshold downward.",
        "title": "Crossing Down",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionType.CROSSING_DOWN"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_2"
          }
        },
        "additionalProperties": false,
        "required": [
          "config",
          "type"
        ]
      },
      "SubscriptionType.CROSSING_DOWN": {
        "type": "string",
        "enum": [
          "Crossing Down"
        ]
      },
      "SubscriptionConfig_2": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/SubscriptionConfig.T_2"
          }
        },
        "additionalProperties": false,
        "required": [
          "params"
        ]
      },
      "CrossDownParams": {
        "type": "object",
        "properties": {
          "threshold_percent": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "required": [
          "threshold_percent"
        ]
      },
      "SubscriptionConfig.T_2": {
        "$ref": "#/components/schemas/CrossDownParams"
      },
      "CrossingStepSubscriptionTypeConfig": {
        "description": "A 'Crossing Step' subscription will fire an alert whenever the price crosses set step thresholds. For instance, with a 10% step, you'll get alerts at 10%, 20%, 30%, 40%, and so on, for both up and down movements.",
        "title": "Crossing Step",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionType.CROSSING_STEP"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_3"
          }
        },
        "additionalProperties": false,
        "required": [
          "config",
          "type"
        ]
      },
      "SubscriptionType.CROSSING_STEP": {
        "type": "string",
        "enum": [
          "Crossing Step"
        ]
      },
      "SubscriptionConfig_3": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/SubscriptionConfig.T_3"
          }
        },
        "additionalProperties": false,
        "required": [
          "params"
        ]
      },
      "CrossStepParams": {
        "type": "object",
        "properties": {
          "threshold_percent": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "required": [
          "threshold_percent"
        ]
      },
      "SubscriptionConfig.T_3": {
        "$ref": "#/components/schemas/CrossStepParams"
      },
      "GreaterThanSubscriptionTypeConfig": {
        "description": "A 'Greater Than' subscription will fire an alert if the price is greater than the specified threshold.",
        "title": "Greater Than",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionType.GREATER_THAN"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_4"
          }
        },
        "additionalProperties": false,
        "required": [
          "config",
          "type"
        ]
      },
      "SubscriptionType.GREATER_THAN": {
        "type": "string",
        "enum": [
          "Greater Than"
        ]
      },
      "SubscriptionConfig_4": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/SubscriptionConfig.T_4"
          }
        },
        "additionalProperties": false,
        "required": [
          "params"
        ]
      },
      "GreaterThanParams": {
        "type": "object",
        "properties": {
          "threshold_percent": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "required": [
          "threshold_percent"
        ]
      },
      "SubscriptionConfig.T_4": {
        "$ref": "#/components/schemas/GreaterThanParams"
      },
      "LessThanSubscriptionTypeConfig": {
        "description": "A 'Less Than' subscription will fire an alert if the price is less than the specified threshold.",
        "title": "Less Than",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionType.LESS_THAN"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_5"
          }
        },
        "additionalProperties": false,
        "required": [
          "config",
          "type"
        ]
      },
      "SubscriptionType.LESS_THAN": {
        "type": "string",
        "enum": [
          "Less Than"
        ]
      },
      "SubscriptionConfig_5": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/SubscriptionConfig.T_5"
          }
        },
        "additionalProperties": false,
        "required": [
          "params"
        ]
      },
      "LessThanParams": {
        "type": "object",
        "properties": {
          "threshold_percent": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "required": [
          "threshold_percent"
        ]
      },
      "SubscriptionConfig.T_5": {
        "$ref": "#/components/schemas/LessThanParams"
      },
      "EventAndMarketOpenStatusChangesSubscriptionTypeConfig": {
        "description": "A 'New or closed events and markets' subscription will fire an alert when new events and markets are created or when existing ones close.",
        "title": "Event and Market Status Changes",
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/SubscriptionType.EVENT_AND_MARKET_OPEN_STATUS_CHANGES"
          },
          "config": {
            "$ref": "#/components/schemas/SubscriptionConfig_6"
          }
        },
        "additionalProperties": false,
        "required": [
          "config",
          "type"
        ]
      },
      "SubscriptionType.EVENT_AND_MARKET_OPEN_STATUS_CHANGES": {
        "type": "string",
        "enum": [
          "New or closed events and markets"
        ]
      },
      "SubscriptionConfig_6": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/SubscriptionConfig.T_6"
          }
        },
        "additionalProperties": false,
        "required": [
          "params"
        ]
      },
      "EmptyParams": {
        "type": "object",
        "additionalProperties": false
      },
      "SubscriptionConfig.T_6": {
        "$ref": "#/components/schemas/EmptyParams"
      },
      "WebhookNotificationChannel": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/NotificationChannelType.WEBHOOK"
          },
          "settings": {
            "type": "object",
            "properties": {
              "webhookUrl": {
                "type": "string"
              }
            },
            "additionalProperties": false,
            "required": [
              "webhookUrl"
            ]
          }
        },
        "additionalProperties": false,
        "required": [
          "settings",
          "type"
        ]
      },
      "NotificationChannelType.WEBHOOK": {
        "type": "string",
        "enum": [
          "Webhook"
        ]
      },
      "CreateWatchlistScopeSubscriptionJSONResponse": {
        "type": "object",
        "properties": {
          "subscriptionId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "subscriptionId"
        ]
      },
      "GetWatchListJSONResponse": {
        "type": "object",
        "properties": {
          "watchLists": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WatchListWithId"
            }
          }
        },
        "additionalProperties": false,
        "required": [
          "watchLists"
        ]
      },
      "WatchListWithId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "query": {
            "$ref": "#/components/schemas/WatchlistQuery"
          },
          "automaticallyAddMatchingEvents": {
            "type": "boolean"
          },
          "events": {
            "$ref": "#/components/schemas/EventsMapWithAutoFetch"
          },
          "hiddenEvents": {
            "$ref": "#/components/schemas/EventsMap"
          },
          "createdAt": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "createdAt",
          "events",
          "id",
          "name"
        ]
      },
      "WatchlistQuery": {
        "$ref": "#/components/schemas/WatchlistQuery_1"
      },
      "WatchlistQuery_1": {
        "type": "object",
        "properties": {
          "keyphrases": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchKeyphrase"
            },
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchTag"
            },
            "nullable": true
          },
          "searchMatchOperator": {
            "$ref": "#/components/schemas/SearchMatchOperator"
          },
          "createdAt": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "createdAt",
          "searchMatchOperator"
        ]
      },
      "__type": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "autoFetch": {
              "type": "boolean"
            },
            "markets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "autoFetch",
            "markets"
          ]
        }
      },
      "EventsMapWithAutoFetch": {
        "$ref": "#/components/schemas/__type"
      },
      "EventsMap": {
        "$ref": "#/components/schemas/EventsMap_1"
      },
      "EventsMap_1": {
        "type": "object",
        "additionalProperties": {
          "type": "object",
          "properties": {
            "markets": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "additionalProperties": false,
          "required": [
            "markets"
          ]
        }
      },
      "CreateWatchListFromTagsJSONRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SearchTag"
            }
          },
          "searchMatchOperator": {
            "$ref": "#/components/schemas/SearchMatchOperator"
          },
          "automaticallyAddMatchingEvents": {
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "searchMatchOperator",
          "tags"
        ]
      },
      "CreateWatchListFromTagsJSONResponse": {
        "type": "object",
        "properties": {
          "watchListId": {
            "type": "string"
          },
          "watchListName": {
            "type": "string"
          },
          "eventCount": {
            "type": "number"
          },
          "marketCount": {
            "type": "number"
          }
        },
        "additionalProperties": false,
        "required": [
          "eventCount",
          "marketCount",
          "watchListId",
          "watchListName"
        ]
      },
      "DeleteWatchListJSONRequest": {
        "type": "object",
        "properties": {
          "watchListId": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "required": [
          "watchListId"
        ]
      },
      "DeleteWatchListJSONResponse": {
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-KEY"
      }
    }
  },
  "security": [],
  "paths": {
    "/search": {
      "post": {
        "operationId": "searchEvents",
        "summary": "Search by keyphrases",
        "description": "Search for events using keyphrases.\n",
        "tags": [
          "Search"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchJSONRequest"
              },
              "example": {
                "keyphrases": [
                  {
                    "text": "will trump",
                    "include": true
                  }
                ],
                "searchMatchOperator": "OR",
                "partial": false
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful search response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchJSONResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/search/tag-slugs": {
      "post": {
        "operationId": "searchByTagSlugs",
        "summary": "Search by tags",
        "description": "Search for events using tag slugs.\n\nYou can get the full list of tag slugs [in the official Polymarket API documentation](https://docs.polymarket.com/api-reference/tags/list-tags).\n",
        "tags": [
          "Search"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchTagsJSONRequest"
              },
              "example": {
                "tags": [
                  {
                    "text": "sports",
                    "include": true
                  },
                  {
                    "text": "esports",
                    "include": true
                  }
                ],
                "searchMatchOperator": "OR"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful search response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SearchJSONResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/subscriptions/create/watchlist": {
      "post": {
        "operationId": "createWatchlistSubscription",
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Create a watchlist subscription",
        "description": "Creates a subscription that monitors all existing and newly added markets in a watchlist. The subscription will trigger an alert based on the specified trigger conditions.  \n\nCurrently, the alert can be one or more webhooks.\n",
        "tags": [
          "Subscriptions and Alerts"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWatchlistScopeSubscriptionJSONRequest"
              },
              "examples": {
                "event_status_changes": {
                  "summary": "New or closed events and markets",
                  "value": {
                    "watchlistId": "507f1f77bcf86cd799439011",
                    "subscriptionTypeConfig": {
                      "type": "New or closed events and markets",
                      "config": {
                        "params": {}
                      }
                    },
                    "channels": [
                      {
                        "type": "Webhook",
                        "settings": {
                          "webhookUrl": "https://your-webhook-endpoint.com/status-changes"
                        }
                      }
                    ]
                  }
                },
                "crossing_alert": {
                  "summary": "Crossing threshold alert",
                  "value": {
                    "watchlistId": "507f1f77bcf86cd799439011",
                    "subscriptionTypeConfig": {
                      "type": "Crossing",
                      "config": {
                        "params": {
                          "threshold_percent": 50
                        }
                      }
                    },
                    "channels": [
                      {
                        "type": "Webhook",
                        "settings": {
                          "webhookUrl": "https://your-webhook-endpoint.com/alerts"
                        }
                      }
                    ]
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Subscription created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWatchlistScopeSubscriptionJSONResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Successful subscription creation",
                    "value": {
                      "subscriptionId": "507f191e810c19729de860ea"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "no_channels": {
                    "summary": "No notification channels provided",
                    "value": {
                      "error": "No channels found for subscription"
                    }
                  },
                  "watchlist_not_found": {
                    "summary": "Watchlist not found or doesn't belong to user",
                    "value": {
                      "error": "Watchlist not found"
                    }
                  },
                  "duplicate_event_status_subscription": {
                    "summary": "Duplicate event status subscription",
                    "value": {
                      "error": "Only one EVENT_AND_MARKET_OPEN_STATUS_CHANGES subscription is allowed per watchlist"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "user_not_found": {
                    "summary": "User not found",
                    "value": {
                      "error": "User not found"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "creation_failed": {
                    "summary": "Failed to create subscription",
                    "value": {
                      "error": "Failed to create subscription"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/watchlists/{watchlistId}": {
      "get": {
        "operationId": "getWatchlists",
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Get watchlists",
        "description": "Retrieves all watchlists, or a specific one if `watchlistId` is provided. Watchlists are sorted by creation date (most recent first).\n",
        "tags": [
          "Watchlists"
        ],
        "parameters": [
          {
            "name": "watchlistId",
            "in": "path",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Optional watchlist ID. If not provided, returns all user's watchlists.",
            "example": "507f1f77bcf86cd799439011"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved watchlists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWatchListJSONResponse"
                },
                "examples": {
                  "all_watchlists": {
                    "summary": "All user watchlists",
                    "value": {
                      "watchLists": [
                        {
                          "id": "507f1f77bcf86cd799439011",
                          "name": "Election Markets",
                          "query": {
                            "keyphrases": [
                              {
                                "text": "election",
                                "include": true
                              }
                            ],
                            "tags": [],
                            "searchMatchOperator": "OR",
                            "createdAt": "2024-09-26T10:30:00.000Z"
                          },
                          "automaticallyAddMatchingEvents": true,
                          "events": {
                            "event123": {
                              "autoFetch": true,
                              "markets": [
                                "market456",
                                "market789"
                              ]
                            }
                          },
                          "createdAt": "2024-09-26T10:30:00.000Z",
                          "updatedAt": "2024-09-26T11:00:00.000Z"
                        }
                      ]
                    }
                  },
                  "specific_watchlist": {
                    "summary": "Specific watchlist",
                    "value": {
                      "watchLists": [
                        {
                          "id": "507f1f77bcf86cd799439011",
                          "name": "Sports Betting",
                          "query": {
                            "keyphrases": [],
                            "tags": [
                              {
                                "text": "sports",
                                "include": true
                              }
                            ],
                            "searchMatchOperator": "AND",
                            "createdAt": "2024-09-26T10:30:00.000Z"
                          },
                          "automaticallyAddMatchingEvents": true,
                          "events": {},
                          "createdAt": "2024-09-26T10:30:00.000Z"
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/watchlists/v2/create": {
      "post": {
        "operationId": "createWatchlistFromTags",
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Create live watchlist from tags",
        "description": "Creates a watchlist by specifying tags; all matching events and markets will be added..\n\n**New** matching events and markets will automatically be added if `automaticallyAddMatchingEvents` is set to true (default).\n",
        "tags": [
          "Watchlists"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateWatchListFromTagsJSONRequest"
              },
              "examples": {
                "sports_watchlist": {
                  "summary": "Sports watchlist with OR operator",
                  "value": {
                    "name": "Sports & Entertainment",
                    "tags": [
                      {
                        "text": "sports",
                        "include": true
                      },
                      {
                        "text": "entertainment",
                        "include": true
                      }
                    ],
                    "searchMatchOperator": "OR",
                    "automaticallyAddMatchingEvents": true
                  }
                },
                "crypto_watchlist": {
                  "summary": "Crypto watchlist with AND operator",
                  "value": {
                    "name": "Crypto Markets",
                    "tags": [
                      {
                        "text": "crypto",
                        "include": true
                      },
                      {
                        "text": "bitcoin",
                        "include": true
                      }
                    ],
                    "searchMatchOperator": "AND",
                    "automaticallyAddMatchingEvents": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateWatchListFromTagsJSONResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Successful watchlist creation",
                    "value": {
                      "watchListId": "507f1f77bcf86cd799439011",
                      "watchListName": "Sports & Entertainment",
                      "eventCount": 25,
                      "marketCount": 67
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_name_length": {
                    "summary": "Invalid watchlist name length",
                    "value": {
                      "error": "Watchlist name must be between 1 and 100 characters"
                    }
                  },
                  "empty_name": {
                    "summary": "Empty watchlist name",
                    "value": {
                      "error": "Watchlist name must be between 1 and 100 characters"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "user_not_found": {
                    "summary": "User not found",
                    "value": {
                      "error": "User not found and/or invalid API key"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/watchlists/delete": {
      "post": {
        "operationId": "deleteWatchlist",
        "security": [
          {
            "apiKey": []
          }
        ],
        "summary": "Delete a watchlist",
        "description": "Permanently deletes a watchlist. Any subscriptions created for this watchlist will be cascade-deleted as well.\n\nThis action cannot be undone.\n",
        "tags": [
          "Watchlists"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeleteWatchListJSONRequest"
              },
              "examples": {
                "delete_request": {
                  "summary": "Delete watchlist request",
                  "value": {
                    "watchListId": "507f1f77bcf86cd799439011"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Watchlist deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteWatchListJSONResponse"
                },
                "examples": {
                  "success": {
                    "summary": "Successful deletion",
                    "value": {}
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "invalid_request": {
                    "summary": "Invalid request format",
                    "value": {
                      "error": "Invalid request body"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - invalid or missing authentication token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Watchlist not found or doesn't belong to user",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                },
                "examples": {
                  "not_found": {
                    "summary": "Watchlist not found",
                    "value": {
                      "error": "Watchlist not found or already deleted"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Rate limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "tags": []
}